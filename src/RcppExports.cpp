// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// elppd
arma::vec elppd(arma::vec Y, arma::mat theta, arma::mat sigma, arma::mat eta);
RcppExport SEXP _anchoredmixtures_elppd(SEXP YSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(elppd(Y, theta, sigma, eta));
    return rcpp_result_gen;
END_RCPP
}
// elppd_M
arma::vec elppd_M(arma::mat Y, arma::mat theta, arma::mat sigma, arma::mat eta);
RcppExport SEXP _anchoredmixtures_elppd_M(SEXP YSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(elppd_M(Y, theta, sigma, eta));
    return rcpp_result_gen;
END_RCPP
}
// update_sticks
arma::vec update_sticks(const arma::vec Svec, const arma::vec avec, const arma::vec bvec);
RcppExport SEXP _anchoredmixtures_update_sticks(SEXP SvecSEXP, SEXP avecSEXP, SEXP bvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type Svec(SvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type bvec(bvecSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sticks(Svec, avec, bvec));
    return rcpp_result_gen;
END_RCPP
}
// calculate_weights
arma::vec calculate_weights(const arma::vec sticks);
RcppExport SEXP _anchoredmixtures_calculate_weights(SEXP sticksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type sticks(sticksSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_weights(sticks));
    return rcpp_result_gen;
END_RCPP
}
// update_allocations
arma::vec update_allocations(const arma::vec y, const arma::vec theta, const arma::vec sigma, const arma::vec eta);
RcppExport SEXP _anchoredmixtures_update_allocations(SEXP ySEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_allocations(y, theta, sigma, eta));
    return rcpp_result_gen;
END_RCPP
}
// enforce_anchors
arma::vec enforce_anchors(const arma::mat A, arma::vec s);
RcppExport SEXP _anchoredmixtures_enforce_anchors(SEXP ASEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(enforce_anchors(A, s));
    return rcpp_result_gen;
END_RCPP
}
// log_post_e0
double log_post_e0(double e0, const int K, const arma::vec Nvec, const double e0_ha0, const double e0_hb0);
RcppExport SEXP _anchoredmixtures_log_post_e0(SEXP e0SEXP, SEXP KSEXP, SEXP NvecSEXP, SEXP e0_ha0SEXP, SEXP e0_hb0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type e0(e0SEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Nvec(NvecSEXP);
    Rcpp::traits::input_parameter< const double >::type e0_ha0(e0_ha0SEXP);
    Rcpp::traits::input_parameter< const double >::type e0_hb0(e0_hb0SEXP);
    rcpp_result_gen = Rcpp::wrap(log_post_e0(e0, K, Nvec, e0_ha0, e0_hb0));
    return rcpp_result_gen;
END_RCPP
}
// e0_accept_prob
double e0_accept_prob(double proposed_e0, double e0, const int K, const arma::vec Nvec, const double e0_ha0, const double e0_hb0);
RcppExport SEXP _anchoredmixtures_e0_accept_prob(SEXP proposed_e0SEXP, SEXP e0SEXP, SEXP KSEXP, SEXP NvecSEXP, SEXP e0_ha0SEXP, SEXP e0_hb0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type proposed_e0(proposed_e0SEXP);
    Rcpp::traits::input_parameter< double >::type e0(e0SEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Nvec(NvecSEXP);
    Rcpp::traits::input_parameter< const double >::type e0_ha0(e0_ha0SEXP);
    Rcpp::traits::input_parameter< const double >::type e0_hb0(e0_hb0SEXP);
    rcpp_result_gen = Rcpp::wrap(e0_accept_prob(proposed_e0, e0, K, Nvec, e0_ha0, e0_hb0));
    return rcpp_result_gen;
END_RCPP
}
// update_e0
List update_e0(const double current_e0, const int K, const arma::vec Svec, const double e0_ha0, const double e0_hb0, const double prop_std);
RcppExport SEXP _anchoredmixtures_update_e0(SEXP current_e0SEXP, SEXP KSEXP, SEXP SvecSEXP, SEXP e0_ha0SEXP, SEXP e0_hb0SEXP, SEXP prop_stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type current_e0(current_e0SEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Svec(SvecSEXP);
    Rcpp::traits::input_parameter< const double >::type e0_ha0(e0_ha0SEXP);
    Rcpp::traits::input_parameter< const double >::type e0_hb0(e0_hb0SEXP);
    Rcpp::traits::input_parameter< const double >::type prop_std(prop_stdSEXP);
    rcpp_result_gen = Rcpp::wrap(update_e0(current_e0, K, Svec, e0_ha0, e0_hb0, prop_std));
    return rcpp_result_gen;
END_RCPP
}
// Kplus
int Kplus(const int K, const arma::vec Svec);
RcppExport SEXP _anchoredmixtures_Kplus(SEXP KSEXP, SEXP SvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Svec(SvecSEXP);
    rcpp_result_gen = Rcpp::wrap(Kplus(K, Svec));
    return rcpp_result_gen;
END_RCPP
}
// update_b0_indprior_SFM
double update_b0_indprior_SFM(const arma::mat gamma, const double k, const double a0, const double ghyp, const double hhyp);
RcppExport SEXP _anchoredmixtures_update_b0_indprior_SFM(SEXP gammaSEXP, SEXP kSEXP, SEXP a0SEXP, SEXP ghypSEXP, SEXP hhypSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type ghyp(ghypSEXP);
    Rcpp::traits::input_parameter< const double >::type hhyp(hhypSEXP);
    rcpp_result_gen = Rcpp::wrap(update_b0_indprior_SFM(gamma, k, a0, ghyp, hhyp));
    return rcpp_result_gen;
END_RCPP
}
// update_lambda_NG_SFM
double update_lambda_NG_SFM(const arma::mat gamma, const double k, const double mu0, const double R0, const double nu1, const double nu2);
RcppExport SEXP _anchoredmixtures_update_lambda_NG_SFM(SEXP gammaSEXP, SEXP kSEXP, SEXP mu0SEXP, SEXP R0SEXP, SEXP nu1SEXP, SEXP nu2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< const double >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< const double >::type nu2(nu2SEXP);
    rcpp_result_gen = Rcpp::wrap(update_lambda_NG_SFM(gamma, k, mu0, R0, nu1, nu2));
    return rcpp_result_gen;
END_RCPP
}
// update_mu0_NG_SFM
double update_mu0_NG_SFM(const arma::mat gamma, const double k, const double R0, const double lambda, const double m0, const double M0);
RcppExport SEXP _anchoredmixtures_update_mu0_NG_SFM(SEXP gammaSEXP, SEXP kSEXP, SEXP R0SEXP, SEXP lambdaSEXP, SEXP m0SEXP, SEXP M0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const double >::type M0(M0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu0_NG_SFM(gamma, k, R0, lambda, m0, M0));
    return rcpp_result_gen;
END_RCPP
}
// melt_probmatrix
arma::mat melt_probmatrix(const arma::mat probM);
RcppExport SEXP _anchoredmixtures_melt_probmatrix(SEXP probMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type probM(probMSEXP);
    rcpp_result_gen = Rcpp::wrap(melt_probmatrix(probM));
    return rcpp_result_gen;
END_RCPP
}
// sort_probmatrix
arma::mat sort_probmatrix(const arma::mat melt_probM, const int sort_col);
RcppExport SEXP _anchoredmixtures_sort_probmatrix(SEXP melt_probMSEXP, SEXP sort_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type melt_probM(melt_probMSEXP);
    Rcpp::traits::input_parameter< const int >::type sort_col(sort_colSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_probmatrix(melt_probM, sort_col));
    return rcpp_result_gen;
END_RCPP
}
// check_if_done
bool check_if_done(const arma::vec current_counts, const arma::vec max_counts);
RcppExport SEXP _anchoredmixtures_check_if_done(SEXP current_countsSEXP, SEXP max_countsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type current_counts(current_countsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type max_counts(max_countsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_if_done(current_counts, max_counts));
    return rcpp_result_gen;
END_RCPP
}
// in_matrix
bool in_matrix(const int value, const arma::mat M);
RcppExport SEXP _anchoredmixtures_in_matrix(SEXP valueSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(in_matrix(value, M));
    return rcpp_result_gen;
END_RCPP
}
// find_anchored
arma::mat find_anchored(const arma::mat P_sorted, const arma::vec m_vec, const int k);
RcppExport SEXP _anchoredmixtures_find_anchored(SEXP P_sortedSEXP, SEXP m_vecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type P_sorted(P_sortedSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type m_vec(m_vecSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(find_anchored(P_sorted, m_vec, k));
    return rcpp_result_gen;
END_RCPP
}
// std_normal_pdf
double std_normal_pdf(const double y);
RcppExport SEXP _anchoredmixtures_std_normal_pdf(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(std_normal_pdf(y));
    return rcpp_result_gen;
END_RCPP
}
// normal_pdf
double normal_pdf(const double y, const double theta, const double sigma);
RcppExport SEXP _anchoredmixtures_normal_pdf(SEXP ySEXP, SEXP thetaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf(y, theta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// log_normal_pdf
double log_normal_pdf(const double y, const double theta, const double sigma);
RcppExport SEXP _anchoredmixtures_log_normal_pdf(SEXP ySEXP, SEXP thetaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_normal_pdf(y, theta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// gamma_pdf
double gamma_pdf(const double y, const double a, const double b);
RcppExport SEXP _anchoredmixtures_gamma_pdf(SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_pdf(y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// log_gamma_pdf
double log_gamma_pdf(const double y, const double a, const double b);
RcppExport SEXP _anchoredmixtures_log_gamma_pdf(SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(log_gamma_pdf(y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// normal_pdf_arma
arma::vec normal_pdf_arma(const arma::vec y, const arma::vec theta, const arma::vec sigma, const bool sum, const bool log);
RcppExport SEXP _anchoredmixtures_normal_pdf_arma(SEXP ySEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP sumSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< const bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(normal_pdf_arma(y, theta, sigma, sum, log));
    return rcpp_result_gen;
END_RCPP
}
// gamma_pdf_arma
arma::vec gamma_pdf_arma(const arma::vec y, const double a, const double b, const bool sum, const bool log);
RcppExport SEXP _anchoredmixtures_gamma_pdf_arma(SEXP ySEXP, SEXP aSEXP, SEXP bSEXP, SEXP sumSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const bool >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< const bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_pdf_arma(y, a, b, sum, log));
    return rcpp_result_gen;
END_RCPP
}
// rnormArma
arma::vec rnormArma(int n, arma::vec mu, arma::vec sigma);
RcppExport SEXP _anchoredmixtures_rnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// allocationprobs_univ_normal
arma::mat allocationprobs_univ_normal(const arma::vec y, const arma::vec theta, const arma::vec sigma, const arma::vec eta);
RcppExport SEXP _anchoredmixtures_allocationprobs_univ_normal(SEXP ySEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(allocationprobs_univ_normal(y, theta, sigma, eta));
    return rcpp_result_gen;
END_RCPP
}
// mixture_likelihoods_univ_normal
arma::vec mixture_likelihoods_univ_normal(const arma::vec y, const arma::vec theta, const arma::vec sigma, const arma::vec eta, const bool sum, const bool logt);
RcppExport SEXP _anchoredmixtures_mixture_likelihoods_univ_normal(SEXP ySEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP sumSEXP, SEXP logtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const bool >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< const bool >::type logt(logtSEXP);
    rcpp_result_gen = Rcpp::wrap(mixture_likelihoods_univ_normal(y, theta, sigma, eta, sum, logt));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp_vec
double logsumexp_vec(arma::vec avec);
RcppExport SEXP _anchoredmixtures_logsumexp_vec(SEXP avecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type avec(avecSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp_vec(avec));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(const double a, const double b);
RcppExport SEXP _anchoredmixtures_logsumexp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// normalize_A
arma::mat normalize_A(arma::mat A);
RcppExport SEXP _anchoredmixtures_normalize_A(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_A(A));
    return rcpp_result_gen;
END_RCPP
}
// normalize_A_reg
arma::mat normalize_A_reg(arma::mat A);
RcppExport SEXP _anchoredmixtures_normalize_A_reg(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_A_reg(A));
    return rcpp_result_gen;
END_RCPP
}
// normalize_vec
arma::mat normalize_vec(arma::vec v);
RcppExport SEXP _anchoredmixtures_normalize_vec(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_vec(v));
    return rcpp_result_gen;
END_RCPP
}
// normalize_logvec
arma::mat normalize_logvec(arma::vec lv);
RcppExport SEXP _anchoredmixtures_normalize_logvec(SEXP lvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type lv(lvSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_logvec(lv));
    return rcpp_result_gen;
END_RCPP
}
// nvec_count
arma::vec nvec_count(arma::vec svec, int k);
RcppExport SEXP _anchoredmixtures_nvec_count(SEXP svecSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type svec(svecSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(nvec_count(svec, k));
    return rcpp_result_gen;
END_RCPP
}
// ordered_remove
arma::vec ordered_remove(arma::vec list, int index);
RcppExport SEXP _anchoredmixtures_ordered_remove(SEXP listSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type list(listSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(ordered_remove(list, index));
    return rcpp_result_gen;
END_RCPP
}
// ordered_insert_next
arma::vec ordered_insert_next(arma::vec list);
RcppExport SEXP _anchoredmixtures_ordered_insert_next(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(ordered_insert_next(list));
    return rcpp_result_gen;
END_RCPP
}
// ordered_next
int ordered_next(arma::vec list);
RcppExport SEXP _anchoredmixtures_ordered_next(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(ordered_next(list));
    return rcpp_result_gen;
END_RCPP
}
// in_vec_int
bool in_vec_int(double n, arma::vec v);
RcppExport SEXP _anchoredmixtures_in_vec_int(SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(in_vec_int(n, v));
    return rcpp_result_gen;
END_RCPP
}
// which_vec_int
int which_vec_int(int n, arma::vec v);
RcppExport SEXP _anchoredmixtures_which_vec_int(SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(which_vec_int(n, v));
    return rcpp_result_gen;
END_RCPP
}
// int_seq
arma::vec int_seq(const int k);
RcppExport SEXP _anchoredmixtures_int_seq(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(int_seq(k));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _anchoredmixtures_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _anchoredmixtures_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _anchoredmixtures_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _anchoredmixtures_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// update_theta_indprior
arma::vec update_theta_indprior(const arma::vec cvector, const arma::vec Y, const double precision, const double kappa, const double mu0);
RcppExport SEXP _anchoredmixtures_update_theta_indprior(SEXP cvectorSEXP, SEXP YSEXP, SEXP precisionSEXP, SEXP kappaSEXP, SEXP mu0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type cvector(cvectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_theta_indprior(cvector, Y, precision, kappa, mu0));
    return rcpp_result_gen;
END_RCPP
}
// update_precision_indprior
arma::vec update_precision_indprior(const arma::vec cvector, const arma::vec Y, const double theta, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_precision_indprior(SEXP cvectorSEXP, SEXP YSEXP, SEXP thetaSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type cvector(cvectorSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_precision_indprior(cvector, Y, theta, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_b0_gammaprior
arma::vec update_b0_gammaprior(const double a0, const double g0, const double h0, const arma::vec precision);
RcppExport SEXP _anchoredmixtures_update_b0_gammaprior(SEXP a0SEXP, SEXP g0SEXP, SEXP h0SEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(update_b0_gammaprior(a0, g0, h0, precision));
    return rcpp_result_gen;
END_RCPP
}
// lb_ind_MAP_b
arma::vec lb_ind_MAP_b(arma::vec Y, arma::vec theta, arma::vec sigma, arma::vec eta, const arma::vec kappa, const arma::vec mu0, const double a0, const double b0, const double g0, const double h0);
RcppExport SEXP _anchoredmixtures_lb_ind_MAP_b(SEXP YSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP g0SEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(lb_ind_MAP_b(Y, theta, sigma, eta, kappa, mu0, a0, b0, g0, h0));
    return rcpp_result_gen;
END_RCPP
}
// lb_ind_MAP_b_A
arma::vec lb_ind_MAP_b_A(arma::vec Y, arma::vec theta, arma::vec sigma, arma::vec eta, const arma::vec kappa, const arma::vec mu0, const double a0, const double b0, const double g0, const double h0, const arma::mat Cm, const arma::mat Am);
RcppExport SEXP _anchoredmixtures_lb_ind_MAP_b_A(SEXP YSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP g0SEXP, SEXP h0SEXP, SEXP CmSEXP, SEXP AmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Am(AmSEXP);
    rcpp_result_gen = Rcpp::wrap(lb_ind_MAP_b_A(Y, theta, sigma, eta, kappa, mu0, a0, b0, g0, h0, Cm, Am));
    return rcpp_result_gen;
END_RCPP
}
// lb_ind_MAP
arma::vec lb_ind_MAP(arma::vec Y, arma::vec theta, arma::vec sigma, arma::vec eta, const arma::vec kappa, const arma::vec mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_lb_ind_MAP(SEXP YSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(lb_ind_MAP(Y, theta, sigma, eta, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// lb_ind_MAP_A
arma::vec lb_ind_MAP_A(arma::vec Y, arma::vec theta, arma::vec sigma, arma::vec eta, const arma::vec kappa, const arma::vec mu0, const double a0, const double b0, const arma::mat Cm, const arma::mat Am);
RcppExport SEXP _anchoredmixtures_lb_ind_MAP_A(SEXP YSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP etaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP CmSEXP, SEXP AmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Am(AmSEXP);
    rcpp_result_gen = Rcpp::wrap(lb_ind_MAP_A(Y, theta, sigma, eta, kappa, mu0, a0, b0, Cm, Am));
    return rcpp_result_gen;
END_RCPP
}
// log_priordensity_gamma_indprior
double log_priordensity_gamma_indprior(const arma::vec gamma, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_log_priordensity_gamma_indprior(SEXP gammaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(log_priordensity_gamma_indprior(gamma, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma_indprior
arma::vec sample_gamma_indprior(const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_sample_gamma_indprior(SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma_indprior(kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma_indprior_mat
arma::mat sample_gamma_indprior_mat(const int nsamples, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_sample_gamma_indprior_mat(SEXP nsamplesSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma_indprior_mat(nsamples, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_gammaj_indprior_SFM
arma::vec update_gammaj_indprior_SFM(const int component, const arma::vec y, const arma::vec s, const arma::vec gamma, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_gammaj_indprior_SFM(SEXP componentSEXP, SEXP ySEXP, SEXP sSEXP, SEXP gammaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type component(componentSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gammaj_indprior_SFM(component, y, s, gamma, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_indprior_SFM
arma::mat update_gamma_indprior_SFM(const int K, const arma::vec y, const arma::vec s, const arma::mat gamma, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_gamma_indprior_SFM(SEXP KSEXP, SEXP ySEXP, SEXP sSEXP, SEXP gammaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma_indprior_SFM(K, y, s, gamma, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// exp_inf
double exp_inf(double x);
RcppExport SEXP _anchoredmixtures_exp_inf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_inf(x));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma_conjprior
arma::vec sample_gamma_conjprior(const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_sample_gamma_conjprior(SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma_conjprior(kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma_conjprior_mat
arma::mat sample_gamma_conjprior_mat(const int nsamples, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_sample_gamma_conjprior_mat(SEXP nsamplesSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma_conjprior_mat(nsamples, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_gammaj_conjprior_SFM
arma::vec update_gammaj_conjprior_SFM(const int component, const arma::vec y, const arma::vec s, const arma::vec gamma, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_gammaj_conjprior_SFM(SEXP componentSEXP, SEXP ySEXP, SEXP sSEXP, SEXP gammaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type component(componentSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gammaj_conjprior_SFM(component, y, s, gamma, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_conjprior_SFM
arma::mat update_gamma_conjprior_SFM(const int K, const arma::vec y, const arma::vec s, const arma::mat gamma, const double kappa, const double mu0, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_gamma_conjprior_SFM(SEXP KSEXP, SEXP ySEXP, SEXP sSEXP, SEXP gammaSEXP, SEXP kappaSEXP, SEXP mu0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma_conjprior_SFM(K, y, s, gamma, kappa, mu0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma_unifprior
arma::vec sample_gamma_unifprior(const double Rlow, const double Rup, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_sample_gamma_unifprior(SEXP RlowSEXP, SEXP RupSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type Rlow(RlowSEXP);
    Rcpp::traits::input_parameter< const double >::type Rup(RupSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma_unifprior(Rlow, Rup, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// sample_gamma_unifprior_mat
arma::mat sample_gamma_unifprior_mat(const int nsamples, const double Rlow, const double Rup, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_sample_gamma_unifprior_mat(SEXP nsamplesSEXP, SEXP RlowSEXP, SEXP RupSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const double >::type Rlow(RlowSEXP);
    Rcpp::traits::input_parameter< const double >::type Rup(RupSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gamma_unifprior_mat(nsamples, Rlow, Rup, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_gammaj_unifprior_SFM
arma::vec update_gammaj_unifprior_SFM(const int component, const arma::vec y, const arma::vec s, const arma::vec gamma, const double Rlow, const double Rup, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_gammaj_unifprior_SFM(SEXP componentSEXP, SEXP ySEXP, SEXP sSEXP, SEXP gammaSEXP, SEXP RlowSEXP, SEXP RupSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type component(componentSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type Rlow(RlowSEXP);
    Rcpp::traits::input_parameter< const double >::type Rup(RupSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gammaj_unifprior_SFM(component, y, s, gamma, Rlow, Rup, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// update_gamma_unifprior_SFM
arma::mat update_gamma_unifprior_SFM(const int K, const arma::vec y, const arma::vec s, const arma::mat gamma, const double Rlow, const double Rup, const double a0, const double b0);
RcppExport SEXP _anchoredmixtures_update_gamma_unifprior_SFM(SEXP KSEXP, SEXP ySEXP, SEXP sSEXP, SEXP gammaSEXP, SEXP RlowSEXP, SEXP RupSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type Rlow(RlowSEXP);
    Rcpp::traits::input_parameter< const double >::type Rup(RupSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gamma_unifprior_SFM(K, y, s, gamma, Rlow, Rup, a0, b0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_anchoredmixtures_elppd", (DL_FUNC) &_anchoredmixtures_elppd, 4},
    {"_anchoredmixtures_elppd_M", (DL_FUNC) &_anchoredmixtures_elppd_M, 4},
    {"_anchoredmixtures_update_sticks", (DL_FUNC) &_anchoredmixtures_update_sticks, 3},
    {"_anchoredmixtures_calculate_weights", (DL_FUNC) &_anchoredmixtures_calculate_weights, 1},
    {"_anchoredmixtures_update_allocations", (DL_FUNC) &_anchoredmixtures_update_allocations, 4},
    {"_anchoredmixtures_enforce_anchors", (DL_FUNC) &_anchoredmixtures_enforce_anchors, 2},
    {"_anchoredmixtures_log_post_e0", (DL_FUNC) &_anchoredmixtures_log_post_e0, 5},
    {"_anchoredmixtures_e0_accept_prob", (DL_FUNC) &_anchoredmixtures_e0_accept_prob, 6},
    {"_anchoredmixtures_update_e0", (DL_FUNC) &_anchoredmixtures_update_e0, 6},
    {"_anchoredmixtures_Kplus", (DL_FUNC) &_anchoredmixtures_Kplus, 2},
    {"_anchoredmixtures_update_b0_indprior_SFM", (DL_FUNC) &_anchoredmixtures_update_b0_indprior_SFM, 5},
    {"_anchoredmixtures_update_lambda_NG_SFM", (DL_FUNC) &_anchoredmixtures_update_lambda_NG_SFM, 6},
    {"_anchoredmixtures_update_mu0_NG_SFM", (DL_FUNC) &_anchoredmixtures_update_mu0_NG_SFM, 6},
    {"_anchoredmixtures_melt_probmatrix", (DL_FUNC) &_anchoredmixtures_melt_probmatrix, 1},
    {"_anchoredmixtures_sort_probmatrix", (DL_FUNC) &_anchoredmixtures_sort_probmatrix, 2},
    {"_anchoredmixtures_check_if_done", (DL_FUNC) &_anchoredmixtures_check_if_done, 2},
    {"_anchoredmixtures_in_matrix", (DL_FUNC) &_anchoredmixtures_in_matrix, 2},
    {"_anchoredmixtures_find_anchored", (DL_FUNC) &_anchoredmixtures_find_anchored, 3},
    {"_anchoredmixtures_std_normal_pdf", (DL_FUNC) &_anchoredmixtures_std_normal_pdf, 1},
    {"_anchoredmixtures_normal_pdf", (DL_FUNC) &_anchoredmixtures_normal_pdf, 3},
    {"_anchoredmixtures_log_normal_pdf", (DL_FUNC) &_anchoredmixtures_log_normal_pdf, 3},
    {"_anchoredmixtures_gamma_pdf", (DL_FUNC) &_anchoredmixtures_gamma_pdf, 3},
    {"_anchoredmixtures_log_gamma_pdf", (DL_FUNC) &_anchoredmixtures_log_gamma_pdf, 3},
    {"_anchoredmixtures_normal_pdf_arma", (DL_FUNC) &_anchoredmixtures_normal_pdf_arma, 5},
    {"_anchoredmixtures_gamma_pdf_arma", (DL_FUNC) &_anchoredmixtures_gamma_pdf_arma, 5},
    {"_anchoredmixtures_rnormArma", (DL_FUNC) &_anchoredmixtures_rnormArma, 3},
    {"_anchoredmixtures_allocationprobs_univ_normal", (DL_FUNC) &_anchoredmixtures_allocationprobs_univ_normal, 4},
    {"_anchoredmixtures_mixture_likelihoods_univ_normal", (DL_FUNC) &_anchoredmixtures_mixture_likelihoods_univ_normal, 6},
    {"_anchoredmixtures_logsumexp_vec", (DL_FUNC) &_anchoredmixtures_logsumexp_vec, 1},
    {"_anchoredmixtures_logsumexp", (DL_FUNC) &_anchoredmixtures_logsumexp, 2},
    {"_anchoredmixtures_normalize_A", (DL_FUNC) &_anchoredmixtures_normalize_A, 1},
    {"_anchoredmixtures_normalize_A_reg", (DL_FUNC) &_anchoredmixtures_normalize_A_reg, 1},
    {"_anchoredmixtures_normalize_vec", (DL_FUNC) &_anchoredmixtures_normalize_vec, 1},
    {"_anchoredmixtures_normalize_logvec", (DL_FUNC) &_anchoredmixtures_normalize_logvec, 1},
    {"_anchoredmixtures_nvec_count", (DL_FUNC) &_anchoredmixtures_nvec_count, 2},
    {"_anchoredmixtures_ordered_remove", (DL_FUNC) &_anchoredmixtures_ordered_remove, 2},
    {"_anchoredmixtures_ordered_insert_next", (DL_FUNC) &_anchoredmixtures_ordered_insert_next, 1},
    {"_anchoredmixtures_ordered_next", (DL_FUNC) &_anchoredmixtures_ordered_next, 1},
    {"_anchoredmixtures_in_vec_int", (DL_FUNC) &_anchoredmixtures_in_vec_int, 2},
    {"_anchoredmixtures_which_vec_int", (DL_FUNC) &_anchoredmixtures_which_vec_int, 2},
    {"_anchoredmixtures_int_seq", (DL_FUNC) &_anchoredmixtures_int_seq, 1},
    {"_anchoredmixtures_rcpparma_hello_world", (DL_FUNC) &_anchoredmixtures_rcpparma_hello_world, 0},
    {"_anchoredmixtures_rcpparma_outerproduct", (DL_FUNC) &_anchoredmixtures_rcpparma_outerproduct, 1},
    {"_anchoredmixtures_rcpparma_innerproduct", (DL_FUNC) &_anchoredmixtures_rcpparma_innerproduct, 1},
    {"_anchoredmixtures_rcpparma_bothproducts", (DL_FUNC) &_anchoredmixtures_rcpparma_bothproducts, 1},
    {"_anchoredmixtures_update_theta_indprior", (DL_FUNC) &_anchoredmixtures_update_theta_indprior, 5},
    {"_anchoredmixtures_update_precision_indprior", (DL_FUNC) &_anchoredmixtures_update_precision_indprior, 5},
    {"_anchoredmixtures_update_b0_gammaprior", (DL_FUNC) &_anchoredmixtures_update_b0_gammaprior, 4},
    {"_anchoredmixtures_lb_ind_MAP_b", (DL_FUNC) &_anchoredmixtures_lb_ind_MAP_b, 10},
    {"_anchoredmixtures_lb_ind_MAP_b_A", (DL_FUNC) &_anchoredmixtures_lb_ind_MAP_b_A, 12},
    {"_anchoredmixtures_lb_ind_MAP", (DL_FUNC) &_anchoredmixtures_lb_ind_MAP, 8},
    {"_anchoredmixtures_lb_ind_MAP_A", (DL_FUNC) &_anchoredmixtures_lb_ind_MAP_A, 10},
    {"_anchoredmixtures_log_priordensity_gamma_indprior", (DL_FUNC) &_anchoredmixtures_log_priordensity_gamma_indprior, 5},
    {"_anchoredmixtures_sample_gamma_indprior", (DL_FUNC) &_anchoredmixtures_sample_gamma_indprior, 4},
    {"_anchoredmixtures_sample_gamma_indprior_mat", (DL_FUNC) &_anchoredmixtures_sample_gamma_indprior_mat, 5},
    {"_anchoredmixtures_update_gammaj_indprior_SFM", (DL_FUNC) &_anchoredmixtures_update_gammaj_indprior_SFM, 8},
    {"_anchoredmixtures_update_gamma_indprior_SFM", (DL_FUNC) &_anchoredmixtures_update_gamma_indprior_SFM, 8},
    {"_anchoredmixtures_exp_inf", (DL_FUNC) &_anchoredmixtures_exp_inf, 1},
    {"_anchoredmixtures_sample_gamma_conjprior", (DL_FUNC) &_anchoredmixtures_sample_gamma_conjprior, 4},
    {"_anchoredmixtures_sample_gamma_conjprior_mat", (DL_FUNC) &_anchoredmixtures_sample_gamma_conjprior_mat, 5},
    {"_anchoredmixtures_update_gammaj_conjprior_SFM", (DL_FUNC) &_anchoredmixtures_update_gammaj_conjprior_SFM, 8},
    {"_anchoredmixtures_update_gamma_conjprior_SFM", (DL_FUNC) &_anchoredmixtures_update_gamma_conjprior_SFM, 8},
    {"_anchoredmixtures_sample_gamma_unifprior", (DL_FUNC) &_anchoredmixtures_sample_gamma_unifprior, 4},
    {"_anchoredmixtures_sample_gamma_unifprior_mat", (DL_FUNC) &_anchoredmixtures_sample_gamma_unifprior_mat, 5},
    {"_anchoredmixtures_update_gammaj_unifprior_SFM", (DL_FUNC) &_anchoredmixtures_update_gammaj_unifprior_SFM, 8},
    {"_anchoredmixtures_update_gamma_unifprior_SFM", (DL_FUNC) &_anchoredmixtures_update_gamma_unifprior_SFM, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_anchoredmixtures(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
