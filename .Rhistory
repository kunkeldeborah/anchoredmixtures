head(data_FCS.VB_updated[[i]]$visitSequence$y2_MCAR)
class(data_FCS.VB_updated[[i]]$visitSequence$y2_MCAR)
(data_FCS.VB_updated[[i]]$visitSequence)
names(data_FCS.VB_updated[[i]])
names(data_FCS.VB_updated[[i]]$iteration)
class(data_FCS.VB_updated[[i]]$iteration)
length(data_FCS.VB_updated[[i]]$iteration)
class(data_FCS.VB_updated[[i]]$post)
(data_FCS.VB_updated[[i]]$post)
(data_FCS.VB_updated[[i]]$chainMean)
debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=30, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=30, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
plot(data_FCS.VB_updates[[i]]$chainMean$y2_MCAR,type='l')
plot(data_FCS.VB_updated[[i]]$chainMean$y2_MCAR,type='l')
(data_FCS.VB_updated[[i]]$chainMean)
names(data_FCS.VB_updated[[i]]$chainMean)
class(data_FCS.VB_updated[[i]]$chainMean)
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
names(data_FCS.VB_updated[[i]])
names(data_FCS.VB_updated[[i]]$blots)
names(data_FCS.VB_updated[[i]]$blots$y2_MCAR)
class(data_FCS.VB_updated[[i]]$blots$y2_MCAR)
length(data_FCS.VB_updated[[i]]$blots$y2_MCAR)
(data_FCS.VB_updated[[i]]$blots$y2_MCAR)
(data_FCS.VB_updated[[i]]$blots)
(data_FCS.VB_updated[[i]]$blocks)
(data_FCS.VB_updated[[i]]$loggedEvents)
debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=30, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
data_FCS.VB[[i]]$method
debug(mice.impute.2l.binary)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=30, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
imp
undebug(mice.impute.2l.binary)
(mice.impute.2l.binary)
mice.impute.2l.binary <- function (y, ry, x, type, intercept = TRUE, groupcenter.slope = FALSE,
draw.fixed = TRUE, random.effects.shrinkage = 1e-06, glmer.warnings = TRUE,
blme_use = FALSE, blme_args = NULL, ...)
{
imp <- mice_imputation_2l_lmer(y = y, ry = ry, x = x, type = type,
intercept = intercept, groupcenter.slope = groupcenter.slope,
draw.fixed = draw.fixed, random.effects.shrinkage = random.effects.shrinkage,
glmer.warnings = glmer.warnings, blme_use = blme_use,
blme_args = blme_args, model = "binary", ...)
print(imp)
return(imp)
}
#debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=10, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
mice_imputation_2l_lmer
rm(mice.impute.2l.binary)
mice
mice.mice_imputation_2l_lmer
mice_imputation_2l_lmer
data_Complete
table(data_i_Complete$y2, data_i_Complete$group)
data_i_Complete
table(complete_datai$y2, complete_datai$group)
complete.datai#debug(mice)
complete.datai
table(complete_datai$y2, complete_datai$group)
table(complete.datai$y2, complete.datai$group)
#debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=40, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
#debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=40, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
#debug(mice.impute.2l.bin)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=70, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
glmfit<- glmer(y2_MCAR~y1_MCAR+x+(1|group),data=complete.datai,
family='binomial')
glmfit
#debug(mice.impute.2l.bin)
set.seed(1001)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=80, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=T)
head(data_FCS.VB_updated[[i]]$imp)
head(data_FCS.VB_updated[[i]]$imp$y2_MCAR)
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
names(data_FCS.VB_updated[[i]])
table(complete.datai$y2, complete.datai$group)
complete.datai#debug(mice)
#data_FCS.VB_updated[[i]]
#complete(data_FCS.VB_updated[[i]])
#plot(data_FCS.VB_updated[[i]], c("y1_MCAR", "y2_MCAR"))
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
set.seed(1001)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=200, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
set.seed(1001)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=500, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
set.seed(1003)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=500, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
set.seed(1034)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=500, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
set.seed(1044)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=500, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
for( it in 1:50)
{
set.seed(1044+it)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=1, maxit=200, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
}
for( it in 1:50)
{
set.seed(1144+it)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=2, maxit=100, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
}
rm(list=ls())
require(mice)
require(missForest)
require(MASS)
require(lme4)
require(mitml)
require(plyr)
require(miceadds)
n.Samples <- 100
G <- 30 # number of clusters
n <- 5 # number of observation per cluster
prop.m <- .50 # 50% missingness
#### Generate two matrices of random normal variables from a multivariate normal distribution
#### with the desired covariance structure
### Computing Y1,Y2,X by summing their respective within- and between-cluster components
# random effects (between-cluster deviations)
mu.b=c(0,0,0)
Sigma.b=matrix(c(2,-1.22,0,-1.22,3,-0.69,0,-0.69,1), nrow = 3, byrow = TRUE)
Sigma.b
set.seed(1234)
RandomBetween <- lapply(1:n.Samples, function(x) mvrnorm(G, mu.b, Sigma.b, tol = 1e-6, empirical = FALSE))
#RandomBetween
# random error (with-in cluster deviations)
mu.w=c(0,0,0)
Sigma.w=matrix(c(18,11.02,0,11.02,27,6.24,0,6.24,9), nrow = 3, byrow = TRUE)
Sigma.w
set.seed(123)
RandomWithin <- lapply(1:n.Samples, function(x) mvrnorm(G*n, mu.w, Sigma.w, tol = 1e-6, empirical = FALSE))
data_Complete=list()
data_MCAR=list()
RNGkind(sample.kind = "Rounding")
set.seed(81)
for (i in 1:n.Samples){
#### For Complete data
y1_i = rep(RandomBetween[[i]][,1], each=n) + RandomWithin[[i]][,1]
y2_i = rep(RandomBetween[[i]][,2], each=n) + RandomWithin[[i]][,2]
y2_i = ifelse(y2_i >= 0, 1, 0) # change y2 to binary
x_i = rep(RandomBetween[[i]][,3], each=n) + RandomWithin[[i]][,3]
group <- as.integer(rep(1:G , each=n ))
data_i_Complete <- data.frame("y1" = y1_i, "y2" = y2_i, "x" = x_i, "group" = group)
data_Complete[[i]]=data_i_Complete  ## create complete data
#### For MCAR
y1_i_MCAR = prodNA(data.frame(y1_i), noNA = prop.m)
y2_i_MCAR = prodNA(data.frame(y2_i), noNA = prop.m)
data_i_MCAR <- data.frame("y1_MCAR" = y1_i_MCAR$y1_i , "y2_MCAR"=y2_i_MCAR$y2_i, "x"=x_i, "group" = as.integer(rep(1:G , each=n)))
data_MCAR[[i]]=data_i_MCAR
}
n.burn <- 50
seeds <- 083492
n.imp <- 20
n.iter <- 500
initial=list()
data_FCS.VB =list()
data_FCS.VB_updated =list()
i=89
data_MCAR[[i]]
md.pattern(data_MCAR[[i]]) # display all different missing data patterns
initial[[i]] <- mice(data_MCAR[[i]], seed=123, maxit=0, print=F) # Initialize MICE
data_FCS.VB[[i]] <- initial[[i]]
data_FCS.VB[[i]]$predictorMatrix[c(1,2),4] <- -2
data_FCS.VB[[i]]$method["y1_MCAR"] <- "2l.pan"
data_FCS.VB[[i]]$method["y2_MCAR"] <- "2l.binary"
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
data_FCS.VB[[i]]$predictorMatrix[c(1,2),4]
ata_FCS.VB[[i]]$predictorMatrix
data_FCS.VB[[i]]$predictorMatrix
# imputation
data_FCB.VB[[i]]
# imputation
data_FCS.VB[[i]]
data_MCAR[[i]]
cbind(data_Complete[[i]]$y1, data_MCAR[[i]]$y1_MCAR)
data_MCAR[[i]]$y1_MCAR <- data_Complete[[i]]$y1
initial[[i]] <- mice(data_MCAR[[i]], seed=123, maxit=0, print=F) # Initialize MICE
data_FCS.VB[[i]] <- initial[[i]]
data_FCS.VB[[i]]$predictorMatrix[c(1,2),4] <- -2
data_FCS.VB[[i]]$method["y1_MCAR"] <- "2l.pan"
data_FCS.VB[[i]]$method["y2_MCAR"] <- "2l.binary"
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
set.seed(81)
for (i in 1:n.Samples){
#### For Complete data
y1_i = rep(RandomBetween[[i]][,1], each=n) + RandomWithin[[i]][,1]
y2_i = rep(RandomBetween[[i]][,2], each=n) + RandomWithin[[i]][,2]
y2_i = ifelse(y2_i >= 0, 1, 0) # change y2 to binary
x_i = rep(RandomBetween[[i]][,3], each=n) + RandomWithin[[i]][,3]
group <- as.integer(rep(1:G , each=n ))
data_i_Complete <- data.frame("y1" = y1_i, "y2" = y2_i, "x" = x_i, "group" = group)
data_Complete[[i]]=data_i_Complete  ## create complete data
#### For MCAR
y1_i_MCAR = prodNA(data.frame(y1_i), noNA = prop.m)
y2_i_MCAR = prodNA(data.frame(y2_i), noNA = prop.m)
data_i_MCAR <- data.frame("y1_MCAR" = y1_i_MCAR$y1_i , "y2_MCAR"=y2_i_MCAR$y2_i, "x"=x_i, "group" = as.integer(rep(1:G , each=n)))
data_MCAR[[i]]=data_i_MCAR
}
n.burn <- 50
seeds <- 083492
n.imp <- 20
n.iter <- 500
initial=list()
data_FCS.VB =list()
data_FCS.VB_updated =list()
i=89
data_MCAR[[i]]
md.pattern(data_MCAR[[i]])
md.pattern(data_MCAR[[i]]) # display all different missing data patterns
data_temp <- data_MCAR[[i]]
data_temp$y2_MCAR <- data_Complete[[i]]$y2
initial[[i]] <- mice(data_temp, seed=123, maxit=0, print=F) # Initialize MICE
data_FCS.VB[[i]] <- initial[[i]]
data_FCS.VB[[i]]$predictorMatrix[c(1,2),4] <- -2
data_FCS.VB[[i]]$method["y1_MCAR"] <- "2l.pan"
data_FCS.VB[[i]]$method["y2_MCAR"] <- "2l.binary"
data_FCS.VB_updated[[i]] <- mice(data_temp, seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
data_MCAR[[i]]
complete.cases <- which(sapply(1:nrow(data_MCAR[[i]]),function(h){sum(is.na(data_MCAR[[i]][h,]))})==0)
complete.datai <- data_MCAR[[i]][complete.cases,]
incomplete.datai <- data_MCAR[[i]][-complete.cases,]
lmmfit<- lmer(y1_MCAR~y2_MCAR+x+(1|group),data=complete.datai,
family='binomial')
lmmfit<- lmer(y1_MCAR~y2_MCAR+x+(1|group),data=complete.datai)
lmmfit
table(complete.datai$y2_MCAR, complete.datai$group)
initial[[i]] <- mice(data_MCAR[[i]], seed=123, maxit=0, print=F) # Initialize MICE
data_FCS.VB[[i]] <- initial[[i]]
data_FCS.VB[[i]]$predictorMatrix[c(1,2),4] <- -2
data_FCS.VB[[i]]$method["y1_MCAR"] <- "2l.pan"
data_FCS.VB[[i]]$method["y2_MCAR"] <- "2l.binary"
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
#debug(mice.impute.2l.bin)
n.burn = 30
n.imp =
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
#debug(mice.impute.2l.bin)
n.burn = 20
n.imp =
data_FCS.VB_updated[[i]] <- mice(data_MCAR[[i]], seed=seeds, m=n.imp, maxit=n.burn, predictorMatrix = data_FCS.VB[[i]]$predictorMatrix, method = data_FCS.VB[[i]]$method, print=F)
#debug(mice.impute.2l.bin)
n.burn = 25
plot(data_FCS.VB_updated[[i]]$chainMean[2,,1],type='l')
plot(data_FCS.VB_updated[[i]]$chainMean[1,,1],type='l')
names(data_FCS.VB_updated[[i]])
dim(data_FCS.VB_updated[[i]]$imp)
class(data_FCS.VB_updated[[i]]$imp)
length(data_FCS.VB_updated[[i]]$imp)
(data_FCS.VB_updated[[i]]$imp$y1_MCAR)
imp <- 1
plot(data_FCS.VB_updated[[i]]$imp$y1_MCAR[,imp],type='l',col=imp)
for(imp in 2:n.imp)
{
points(data_FCS.VB_updated[[i]]$imp$y1_MCAR[,imp],type='l',col=imp)
}
2:n.imp
n.imp
for(imp in 2:20)
{
points(data_FCS.VB_updated[[i]]$imp$y1_MCAR[,imp],type='l',col=imp)
}
plot(data_FCS.VB_updated[[i]]$imp$y2_MCAR[,imp],type='l',col=imp)
for(imp in 2:20)
{
points(data_FCS.VB_updated[[i]]$imp$y2_MCAR[,imp],type='l',col=imp)
}
dim(data_FCS.VB_updated[[i]]$imp$y1_MCAR)
dim(data_FCS.VB_updated[[i]]$imp$y2_MCAR)
dim(data_FCS.VB_updated[[i]]$imp)
(data_FCS.VB_updated[[i]]$imp)
row.names(data_FCS.VB_updated[[i]]$imp$y1_MCAR)
complete_data <- complete(data_FCS.VB_updated[[i]])
dim(complete_data)
dim(data_FCS.VB_updated[[i]]$imp$y1_MCAR)
names(data_FCS.VB_updated)
names(data_FCS.VB_updated[[i]])
complete_data <- complete(data_FCS.VB_updated[[i]], action='long')
dim(complete_data)
head(complete_data)
list_complete <- lapply(1:n.imp,function(h){
data <- subset(complete_data, complete_data$.imp==h)
table(data$y2_MCAR,data$group)})
list_complete <- lapply(1:20,function(h){
data <- subset(complete_data, complete_data$.imp==h)
table(data$y2_MCAR,data$group)})
list_complete[[1]]
list_complete[[20]]
list_complete[[17]]
list_complete <- lapply(1:20,function(h){
data <- subset(complete_data, complete_data$.imp==h)
tapply(data$y1_MCAR,data$group,mean)})
list_complete[[17]]
plot(list_complete[[17]])
plot(list_complete[[18]])
plot(list_complete[[19]])
plot(list_complete[[12]])
plot(list_complete[[11]])
700/60
140/60
untar(mice)
n_alpha <- 40
t <- runif(n_alpha)
library(MCMCpack)
rdirichlet(theta*sort(t))
rdirichlet(1,theta*sort(t))
theta <- 10
rdirichlet(1,theta*sort(t))
temp <- rdirichlet(1,theta*sort(t))
plot(cumsum(temp))
temp <- rdirichlet(1,theta*sort(t))
plot(cumsum(temp))
temp <- rdirichlet(1,theta*sort(t))
plot(cumsum(temp))
plot(sor(tt),cumsum(temp))
tt <- runif(n_alpha)
theta <- 10
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
library(MCMCpack)
n_alpha <- 40
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
library(MCMCpack)
n_alpha <- 40
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
library(MCMCpack)
n_alpha <- 40
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
library(MCMCpack)
n_alpha <- 40
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
library(MCMCpack)
n_alpha <- 40
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
library(MCMCpack)
n_alpha <- 40
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp))
plot(sort(tt),cumsum(tt))
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt),type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt),type='l')
}
cumsum(tt)
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
}
n_alpha <- 100
theta <- 10
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
}
n_alpha <- 60
theta <- 50
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
}
n_alpha <- 60
theta <- 50
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
}
n_alpha <- 60
theta <- 50
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
}
n_alpha <- 60
theta <- 50
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
plot(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
for( i in 1:10)
{
tt <- runif(n_alpha)
temp <- rdirichlet(1,theta*sort(tt))
points(sort(tt),cumsum(temp),type='l',col='red')
points(sort(tt),cumsum(tt)/n_alpha,type='l')
}
cumsum(tt)
2100/9
21000/9
86150/9
86150/9*2
86150/9*3
J <- 5
nj <- 3
rho <- .45
Jm <- matrix(1,nrow=nj,ncol=nj)
diag(J)  %x% rho*Jm + (1-rho)*diag(nj)
rho*Jm + (1-rho)*diag(nj)
kronecker( diag(J), rho*Jm + (1-rho)*diag(nj) )
D <- kronecker( diag(J), rho*Jm + (1-rho)*diag(nj) )
trace(D)
diag(D)
dim(D)
eigen(D)
eigen(D)$values
J <- 5
nj <- 3
rho <- .75
Jm <- matrix(1,nrow=nj,ncol=nj)
D <- kronecker( diag(J), rho*Jm + (1-rho)*diag(nj) )
trace(D)
diag(D)
dim(D)
eigen(D)$values
J <- 5
nj <- 3
rho <- .9
Jm <- matrix(1,nrow=nj,ncol=nj)
D <- kronecker( diag(J), rho*Jm + (1-rho)*diag(nj) )
trace(D)
diag(D)
dim(D)
eigen(D)$values
J <- 5
nj <- 10
rho <- .9
Jm <- matrix(1,nrow=nj,ncol=nj)
D <- kronecker( diag(J), rho*Jm + (1-rho)*diag(nj) )
trace(D)
diag(D)
dim(D)
eigen(D)$values
D.inv <- solve(D)
# generate data
means <- seq(-5,5,length.out=J)
indicators <- rep(1:J,each=nj)
y <- rnorm(length(indicators),means[indicators],1)
t(matrix(y,ncol=1))%*%D.inv%*%matrix(y,ncol=1)
mean(y)
sum(y)
sum(y^2)
library(anchoredmixtures)
